import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { Link, useNavigate } from 'react-router-dom';
import './Registration.css';

const Registration = () => {
  const [userType, setUserType] = useState('individual'); // 'individual' –∏–ª–∏ 'legal'
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [name, setName] = useState('');
  // –ü–æ–ª—è –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
  const [companyName, setCompanyName] = useState('');
  const [inn, setInn] = useState('');
  const [ogrn, setOgrn] = useState('');
  const [contactPerson, setContactPerson] = useState('');
  const [position, setPosition] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { register } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—â–∏—Ö –ø–æ–ª–µ–π
    if (password !== confirmPassword) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    if (password.length < 6) {
      setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }

    if (name.length < 2) {
      setError('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
    if (userType === 'legal') {
      if (companyName.length < 2) {
        setError('–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
      }
      if (inn.length !== 10 && inn.length !== 12) {
        setError('–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä');
        return;
      }
      if (ogrn.length !== 13 && ogrn.length !== 15) {
        setError('–û–ì–†–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä');
        return;
      }
      if (contactPerson.length < 2) {
        setError('–§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
      }
      if (position.length < 2) {
        setError('–î–æ–ª–∂–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
      }
    }

    setIsLoading(true);

    try {
      const userData = {
        email,
        password,
        name,
        userType,
        ...(userType === 'legal' && {
          companyName,
          inn,
          ogrn,
          contactPerson,
          position
        })
      };

      await register(userData);
      navigate('/login');
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="registration-page">
      <div className="registration-container">
        <div className="registration-header">
          <h1>‚öñÔ∏è –ì–∞–ª–∏–Ω–∞ - Windex-–Æ—Ä–∏—Å—Ç</h1>
          <p>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
        </div>

        {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className="user-type-selector">
          <div className="user-type-buttons">
            <button
              type="button"
              className={`user-type-button ${userType === 'individual' ? 'active' : ''}`}
              onClick={() => setUserType('individual')}
            >
              üßë –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
            </button>
            <button
              type="button"
              className={`user-type-button ${userType === 'legal' ? 'active' : ''}`}
              onClick={() => setUserType('legal')}
            >
              üè¢ –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
            </button>
          </div>
        </div>

        <form onSubmit={handleSubmit} className="registration-form">
          {error && <div className="error-message">{error}</div>}
          
          <div className="form-group">
            <label htmlFor="name">
              {userType === 'individual' ? '–ò–º—è:' : '–ò–º—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è:'}
            </label>
            <input
              id="name"
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
              placeholder={userType === 'individual' ? '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è' : '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è'}
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="email">Email:</label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å:</label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤)"
            />
          </div>
          
          <div className="form-group">
            <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</label>
            <input
              id="confirmPassword"
              type="password"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            />
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü */}
          {userType === 'legal' && (
            <>
              <div className="form-section-title">
                <h3>üìã –î–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</h3>
              </div>

              <div className="form-group">
                <label htmlFor="companyName">–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</label>
                <input
                  id="companyName"
                  type="text"
                  value={companyName}
                  onChange={(e) => setCompanyName(e.target.value)}
                  required
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
                />
              </div>

              <div className="form-group">
                <label htmlFor="inn">–ò–ù–ù:</label>
                <input
                  id="inn"
                  type="text"
                  value={inn}
                  onChange={(e) => setInn(e.target.value.replace(/\D/g, ''))}
                  required
                  placeholder="10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä"
                  maxLength="12"
                />
              </div>

              <div className="form-group">
                <label htmlFor="ogrn">–û–ì–†–ù/–û–ì–†–ù–ò–ü:</label>
                <input
                  id="ogrn"
                  type="text"
                  value={ogrn}
                  onChange={(e) => setOgrn(e.target.value.replace(/\D/g, ''))}
                  required
                  placeholder="13 –∏–ª–∏ 15 —Ü–∏—Ñ—Ä"
                  maxLength="15"
                />
              </div>

              <div className="form-group">
                <label htmlFor="contactPerson">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</label>
                <input
                  id="contactPerson"
                  type="text"
                  value={contactPerson}
                  onChange={(e) => setContactPerson(e.target.value)}
                  required
                  placeholder="–§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞"
                />
              </div>

              <div className="form-group">
                <label htmlFor="position">–î–æ–ª–∂–Ω–æ—Å—Ç—å:</label>
                <input
                  id="position"
                  type="text"
                  value={position}
                  onChange={(e) => setPosition(e.target.value)}
                  required
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
                />
              </div>
            </>
          )}

          <button type="submit" disabled={isLoading} className="registration-button">
            {isLoading ? '–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </button>
        </form>
        
        <div className="registration-footer">
          <p>
            –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <Link to="/login">–í–æ–π—Ç–∏</Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Registration; 