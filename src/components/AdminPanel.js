import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import { Database, RefreshCw, Users, LogOut, Trash2, UserCheck, UserX, DollarSign, ArrowLeft } from 'lucide-react';
import { getKnowledgeStats, forceSyncKnowledgeBase } from '../data/legalKnowledgeBase';
import { adminService } from '../services/adminService';
import './AdminPanel.css';
import { formatCurrencyUSD, formatNumberRu } from '../utils/numberUtils';

const AdminPanel = () => {
  const { user, logout, isAdmin, getAllUsers, deleteUser, changeUserRole } = useAuth();
  const navigate = useNavigate();
  const [knowledgeStats, setKnowledgeStats] = useState(null);
  const [isSyncing, setIsSyncing] = useState(false);
  const [users, setUsers] = useState([]);
  const [activeTab, setActiveTab] = useState('knowledge');
  const [syncMessage, setSyncMessage] = useState('');
  const [openAIStats, setWindexAIStats] = useState(null);
  const [dailyStats, setDailyStats] = useState([]);
  const [isLoadingStats, setIsLoadingStats] = useState(false);
  const [apiSettings, setApiSettings] = useState(null);

  const loadUsers = useCallback(() => {
    try {
      const allUsers = getAllUsers();
      setUsers(allUsers);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  }, [getAllUsers]);

  const loadKnowledgeStats = useCallback(async () => {
    try {
      const stats = await getKnowledgeStats();
      setKnowledgeStats(stats);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }, []);

  const loadWindexAIStats = useCallback(async () => {
    setIsLoadingStats(true);
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É WindexAI...');
      const stats = await adminService.getWindexAIStats();
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WindexAI –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stats);
      setWindexAIStats(stats);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WindexAI:', error);
    } finally {
      setIsLoadingStats(false);
    }
  }, []);

  const loadDailyStats = useCallback(async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
      const stats = await adminService.getDailyStats();
      console.log('‚úÖ –î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', stats);
      setDailyStats(stats);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }, []);

  const loadAPISettings = useCallback(async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API...');
      const settings = await adminService.getAPISettings();
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);
      setApiSettings(settings);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API:', error);
    }
  }, []);

  useEffect(() => {
    console.log('üîÑ AdminPanel useEffect –∑–∞–ø—É—â–µ–Ω');
    if (!isAdmin()) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º');
      navigate('/');
      return;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
    loadKnowledgeStats();
    loadUsers();
    loadWindexAIStats();
    loadDailyStats();
    loadAPISettings();
  }, [isAdmin, navigate, loadUsers, loadKnowledgeStats, loadWindexAIStats, loadDailyStats, loadAPISettings]);

  const handleSyncKnowledge = useCallback(async () => {
    setIsSyncing(true);
    setSyncMessage('');

    try {
      await forceSyncKnowledgeBase();
      await loadKnowledgeStats();
      setSyncMessage('–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      setSyncMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π');
    } finally {
      setIsSyncing(false);
    }
  }, [loadKnowledgeStats]);

  const handleDeleteUser = useCallback(async (userId) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
      try {
        deleteUser(userId);
        loadUsers();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }
  }, [deleteUser, loadUsers]);

  const handleChangeRole = useCallback(async (userId, newRole) => {
    try {
      changeUserRole(userId, newRole);
      loadUsers();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏:', error);
    }
  }, [changeUserRole, loadUsers]);

  const handleResetStats = useCallback(async () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      try {
        await adminService.resetStats();
        await loadWindexAIStats();
        await loadDailyStats();
        alert('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }
    }
  }, [loadWindexAIStats, loadDailyStats]);


  const formatCurrency = formatCurrencyUSD;
  const formatNumber = formatNumberRu;

  const handleLogout = () => {
    logout();
    navigate('/');
  };

  const handleBack = () => {
    navigate('/');
  };

  if (!isAdmin()) {
    return null;
  }

  return (
    <div className="admin-panel">
      <div className="admin-header">
        <div className="admin-title">
          <h1>‚öñÔ∏è –ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
          <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.name}</p>
        </div>
        <div style={{ display: 'flex', gap: 10 }}>
          <button onClick={handleBack} className="back-button">
            <ArrowLeft size={20} />
            –ù–∞–∑–∞–¥ –Ω–∞ —Å–∞–π—Ç
          </button>
          <button onClick={handleLogout} className="logout-button">
            <LogOut size={20} />
            –í—ã–π—Ç–∏
          </button>
        </div>
      </div>

      <div className="admin-tabs">
        <button
          className={`tab ${activeTab === 'knowledge' ? 'active' : ''}`}
          onClick={() => setActiveTab('knowledge')}
        >
          <Database size={20} />
          –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        </button>
        <button
          className={`tab ${activeTab === 'users' ? 'active' : ''}`}
          onClick={() => setActiveTab('users')}
        >
          <Users size={20} />
          –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        </button>
        <button
          className={`tab ${activeTab === 'openai' ? 'active' : ''}`}
          onClick={() => setActiveTab('openai')}
        >
          <DollarSign size={20} />
          WindexAI –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        </button>
      </div>

      <div className="admin-content">
        {activeTab === 'knowledge' && (
          <div className="knowledge-panel">
            <div className="panel-section">
              <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</h3>
              {knowledgeStats && (
                <div className="stats-grid">
                  <div className="stat-card">
                    <div className="stat-value">{knowledgeStats.totalItems}</div>
                    <div className="stat-label">–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π</div>
                  </div>
                  <div className="stat-card">
                    <div className="stat-value">{knowledgeStats.categoriesCount}</div>
                    <div className="stat-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
                  </div>
                  <div className="stat-card">
                    <div className="stat-value">{knowledgeStats.lastUpdated}</div>
                    <div className="stat-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</div>
                  </div>
                </div>
              )}
            </div>

            <div className="panel-section">
              <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π</h3>
              <div className="action-buttons">
                <button
                  onClick={handleSyncKnowledge}
                  disabled={isSyncing}
                  className="sync-button"
                >
                  <RefreshCw size={20} className={isSyncing ? 'spinning' : ''} />
                  {isSyncing ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π'}
                </button>
              </div>
              {syncMessage && (
                <div className={`sync-message ${syncMessage.includes('–û—à–∏–±–∫–∞') ? 'error' : 'success'}`}>
                  {syncMessage}
                </div>
              )}
            </div>

            <div className="panel-section">
              <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h3>
              <div className="system-info">
                <div className="info-item">
                  <span className="info-label">–í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã:</span>
                  <span className="info-value">1.0.0</span>
                </div>
                <div className="info-item">
                  <span className="info-label">–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:</span>
                  <span className="info-value">üü¢ –ê–∫—Ç–∏–≤–µ–Ω</span>
                </div>
                <div className="info-item">
                  <span className="info-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span>
                  <span className="info-value">{new Date().toLocaleString()}</span>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'users' && (
          <div className="users-panel">
            <div className="panel-section">
              <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
              <div className="users-stats">
                <div className="stat-card">
                  <div className="stat-value">{users.length}</div>
                  <div className="stat-label">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">{users.filter(u => u.role === 'admin').length}</div>
                  <div className="stat-label">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">{users.filter(u => u.role === 'user').length}</div>
                  <div className="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                </div>
              </div>
            </div>

            <div className="panel-section">
              <h3>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
              <div className="users-table">
                <div className="table-header">
                  <div className="table-cell">–ò–º—è</div>
                  <div className="table-cell">Email</div>
                  <div className="table-cell">–†–æ–ª—å</div>
                  <div className="table-cell">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</div>
                  <div className="table-cell">–î–µ–π—Å—Ç–≤–∏—è</div>
                </div>
                {users.map(userData => (
                  <div key={userData.id} className="table-row">
                    <div className="table-cell">{userData.name}</div>
                    <div className="table-cell">{userData.email}</div>
                    <div className="table-cell">
                      <span className={`role-badge ${userData.role}`}>
                        {userData.role === 'admin' ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                      </span>
                    </div>
                    <div className="table-cell">
                      {new Date(userData.createdAt).toLocaleDateString()}
                    </div>
                    <div className="table-cell">
                      <div className="action-buttons">
                        {userData.id !== user?.id && (
                          <>
                            <button
                              onClick={() => handleChangeRole(
                                userData.id,
                                userData.role === 'admin' ? 'user' : 'admin'
                              )}
                              className="role-button"
                              title={userData.role === 'admin' ? '–°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞' : '–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º'}
                            >
                              {userData.role === 'admin' ? <UserX size={16} /> : <UserCheck size={16} />}
                            </button>
                            <button
                              onClick={() => handleDeleteUser(userData.id)}
                              className="delete-button"
                              title="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-trash2">
                                <path d="M3 6h18"></path>
                                <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                                <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                                <line x1="10" x2="10" y1="11" y2="17"></line>
                                <line x1="14" x2="14" y1="11" y2="17"></line>
                              </svg>
                            </button>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'openai' && (
          <div className="openai-panel">
            <div className="panel-section">
              <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WindexAI</h3>
              {isLoadingStats ? (
                <div className="loading-stats">
                  <RefreshCw size={20} className="spinning" />
                  –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
                </div>
              ) : openAIStats ? (
                <div className="stats-grid">
                  <div className="stat-card">
                    <div className="stat-value">{formatNumber(openAIStats.totalTokens)}</div>
                    <div className="stat-label">–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤</div>
                  </div>
                  <div className="stat-card">
                    <div className="stat-value">{formatCurrency(openAIStats.totalCost)}</div>
                    <div className="stat-label">–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã</div>
                  </div>
                  <div className="stat-card">
                    <div className="stat-value">{formatNumber(openAIStats.totalRequests)}</div>
                    <div className="stat-label">–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                  </div>
                  <div className="stat-card">
                    <div className="stat-value">{formatNumber(openAIStats.avgTokensPerRequest)}</div>
                    <div className="stat-label">–°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤/–∑–∞–ø—Ä–æ—Å</div>
                  </div>
                  <div className="stat-card">
                    <div className="stat-value">{formatCurrency(openAIStats.avgCostPerRequest)}</div>
                    <div className="stat-label">–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å/–∑–∞–ø—Ä–æ—Å</div>
                  </div>
                  <div className="stat-card">
                    <div className="stat-value">{openAIStats.currentMonth}</div>
                    <div className="stat-label">–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</div>
                  </div>
                </div>
              ) : (
                <div className="no-stats">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>
              )}
            </div>

            <div className="panel-section">
              <h3>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º</h3>
              {dailyStats.length > 0 ? (
                <div className="daily-stats-table">
                  <div className="table-header">
                    <div className="table-cell">–î–∞—Ç–∞</div>
                    <div className="table-cell">–ó–∞–ø—Ä–æ—Å—ã</div>
                    <div className="table-cell">–¢–æ–∫–µ–Ω—ã</div>
                    <div className="table-cell">–ó–∞—Ç—Ä–∞—Ç—ã</div>
                  </div>
                  {dailyStats.map((day, index) => (
                    <div key={index} className="table-row">
                      <div className="table-cell">{day.date}</div>
                      <div className="table-cell">{formatNumber(day.requests)}</div>
                      <div className="table-cell">{formatNumber(day.tokens)}</div>
                      <div className="table-cell">{formatCurrency(day.cost)}</div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="no-stats">–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>
              )}
            </div>

            <div className="panel-section">
              <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API</h3>
              {apiSettings && (
                <div className="api-settings">
                  <div className="setting-item">
                    <span className="setting-label">–ú–æ–¥–µ–ª—å WindexAI:</span>
                    <span className="setting-value">{apiSettings.model}</span>
                  </div>
                  <div className="setting-item">
                    <span className="setting-label">–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤:</span>
                    <span className="setting-value">{formatNumber(apiSettings.maxTokens)}</span>
                  </div>
                  <div className="setting-item">
                    <span className="setting-label">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</span>
                    <span className="setting-value">{apiSettings.temperature}</span>
                  </div>
                  <div className="setting-item">
                    <span className="setting-label">–°—Ç–∞—Ç—É—Å API:</span>
                    <span className="setting-value">
                      {apiSettings.apiStatus === 'active' ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                    </span>
                  </div>
                </div>
              )}
            </div>

            <div className="panel-section">
              <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π</h3>
              <div className="action-buttons">
                <button
                  onClick={loadWindexAIStats}
                  disabled={isLoadingStats}
                  className="refresh-button"
                >
                  <RefreshCw size={20} className={isLoadingStats ? 'spinning' : ''} />
                  {isLoadingStats ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'}
                </button>
                <button
                  onClick={handleResetStats}
                  className="reset-button"
                >
                  <Trash2 size={20} />
                  –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminPanel; 