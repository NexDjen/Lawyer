import React, { useState, useRef, useEffect } from 'react';
import { ArrowLeft, Send } from 'lucide-react';
import './DocumentDetailView.css';

const DocumentDetailView = ({ document, onBack }) => {
  console.log('üîç DocumentDetailView received document:', document);
  console.log('üîç document.analysis:', document.analysis);
  console.log('üîç document.extracted_text:', document.extracted_text);
  
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  const [initialAnalysisData, setInitialAnalysisData] = useState(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
  useEffect(() => {
    const welcomeMessage = {
      id: 'welcome',
      role: 'assistant',
      content: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ì–∞–ª–∏–Ω–∞, –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç "${document.name}". –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
      timestamp: new Date().toISOString()
    };
    setMessages([welcomeMessage]);
  }, [document]);

  useEffect(() => {
    const key = `analysis_${document.metadata?.docId}`;
    const raw = localStorage.getItem(key);
    if (raw) {
      try {
        const parsed = JSON.parse(raw);
        setInitialAnalysisData(parsed.analysis);
      } catch {}
    }
  }, [document.metadata?.docId]);
  
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  
  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;
    
    const userMessage = {
      id: `user_${Date.now()}`,
      role: 'user',
      content: inputMessage.trim(),
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ API —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
      const response = await fetch(`/api/documents/${document.id}/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: inputMessage.trim(),
          history: messages,
          documentContext: {
            name: document.name,
            content: document.content || document.extracted_text || document.extractedText,
            analysis: document.analysis
          }
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        const assistantMessage = {
          id: `assistant_${Date.now()}`,
          role: 'assistant',
          content: data.response,
          timestamp: new Date().toISOString()
        };
        setMessages(prev => [...prev, assistantMessage]);
      } else {
        throw new Error('Failed to get response');
      }
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage = {
        id: `error_${Date.now()}`,
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        timestamp: new Date().toISOString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };
  
  const toDisplayText = (content) => {
    if (typeof content === 'string') {
      return content;
    }
    if (typeof content === 'object' && content !== null) {
      return JSON.stringify(content, null, 2);
    }
    return String(content);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é LLM
  const generateRiskAnalysis = async (riskText) => {
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ä–∏—Å–∫ –∏ –¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏: "${riskText}". 
          
          –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
          {
            "level": "high|medium|low",
            "label": "–í–´–°–û–ö–ò–ô|–°–†–ï–î–ù–ò–ô|–ù–ò–ó–ö–ò–ô", 
            "category": "–¢–∏–ø —Ä–∏—Å–∫–∞",
            "impact": "–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è",
            "analysis": "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞",
            "recommendations": ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3"]
          }`,
          history: []
        })
      });

      if (response.ok) {
        const data = await response.json();
        const aiResponse = data.response;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          try {
            return JSON.parse(jsonMatch[0]);
          } catch (e) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM:', e);
          }
        }
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞:', error);
    }
    
    return null;
  };

  const getComplianceStatus = (compliance) => {
    const status = compliance.toLowerCase();
    
    if (status.includes('high') || status.includes('–≤—ã—Å–æ–∫–∏–π') || status.includes('–ø–æ–ª–Ω–æ–µ')) {
      return (
        <div className="compliance-item compliance-high">
          <div className="compliance-header">
            <span className="compliance-icon">‚úÖ</span>
            <span className="compliance-label">–ü–û–õ–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï</span>
            <div className="compliance-rating">
              <span className="rating-score">5/5</span>
              <div className="rating-stars">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</div>
            </div>
          </div>
          <p>–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞</p>
          <div className="compliance-details">
            <h5>‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</h5>
            <ul>
              <li>–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç</li>
              <li>–°–æ–±–ª—é–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏</li>
              <li>–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏</li>
              <li>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–æ–≤—ã–º –Ω–æ—Ä–º–∞–º</li>
            </ul>
          </div>
        </div>
      );
    }
    
    if (status.includes('medium') || status.includes('—Å—Ä–µ–¥–Ω–∏–π') || status.includes('—á–∞—Å—Ç–∏—á–Ω–æ–µ')) {
      return (
        <div className="compliance-item compliance-medium">
          <div className="compliance-header">
            <span className="compliance-icon">‚ö†Ô∏è</span>
            <span className="compliance-label">–ß–ê–°–¢–ò–ß–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï</span>
            <div className="compliance-rating">
              <span className="rating-score">3/5</span>
              <div className="rating-stars">‚≠ê‚≠ê‚≠ê‚òÜ‚òÜ</div>
            </div>
          </div>
          <p>–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è</p>
          <div className="compliance-details">
            <h5>‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:</h5>
            <ul>
              <li>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞</li>
              <li>–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞</li>
              <li>–ù–∞—Ä—É—à–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏</li>
              <li>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è</li>
            </ul>
            <h5>‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</h5>
            <ul>
              <li>–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞</li>
              <li>–°–æ–±–ª—é–¥–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–æ–≤—ã–µ –Ω–æ—Ä–º—ã</li>
            </ul>
          </div>
        </div>
      );
    }
    
    if (status.includes('low') || status.includes('–Ω–∏–∑–∫–∏–π') || status.includes('–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ')) {
      return (
        <div className="compliance-item compliance-low">
          <div className="compliance-header">
            <span className="compliance-icon">‚ùå</span>
            <span className="compliance-label">–ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï</span>
            <div className="compliance-rating">
              <span className="rating-score">1/5</span>
              <div className="rating-stars">‚≠ê‚òÜ‚òÜ‚òÜ‚òÜ</div>
            </div>
          </div>
          <p>–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞</p>
          <div className="compliance-details">
            <h5>‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:</h5>
            <ul>
              <li>–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</li>
              <li>–ù–∞—Ä—É—à–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</li>
              <li>–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏</li>
              <li>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –¥–µ–π—Å—Ç–≤—É—é—â–µ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É</li>
              <li>–ü—Ä–æ–ø—É—â–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏</li>
            </ul>
          </div>
        </div>
      );
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    return (
      <div className="compliance-item compliance-medium">
        <div className="compliance-header">
          <span className="compliance-icon">‚ö†Ô∏è</span>
          <span className="compliance-label">–¢–†–ï–ë–£–ï–¢ –ü–†–û–í–ï–†–ö–ò</span>
          <div className="compliance-rating">
            <span className="rating-score">2/5</span>
            <div className="rating-stars">‚≠ê‚≠ê‚òÜ‚òÜ‚òÜ</div>
          </div>
        </div>
        <p>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</p>
        <div className="compliance-details">
          <h5>üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</h5>
          <ul>
            <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</li>
            <li>–£–±–µ–¥–∏—Ç—å—Å—è –≤ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</li>
            <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–∞–≤–æ–≤—ã–º –Ω–æ—Ä–º–∞–º</li>
            <li>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–æ–≤</li>
          </ul>
        </div>
      </div>
    );
  };
  
  return (
    <div className="document-detail-view">
      <div className="document-detail-header">
        <button className="back-button" onClick={onBack}>
          <ArrowLeft size={20} />
          –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
        </button>
        <h2 className="document-title">{document.name}</h2>
      </div>
      
      <div className="document-detail-content">
        <div className="document-panel">
          {/* ‚úÖ Raw document content removed - only AI analysis below */}
          
          {/* Expert Analysis Section */}
          {document.analysis && (
            <div className="llm-analysis-container">
              <div className="analysis-header-new">
                <h3>üìä –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç –ì–∞–ª–∏–Ω—ã</h3>
                <p className="analysis-subtitle">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É</p>
              </div>
              
              {/* Expert Opinion */}
              {document.analysis.expertOpinion && (
                <div className="analysis-section expert-opinion-section">
                  <div className="section-header">
                    <span className="section-icon">üíº</span>
                    <h4>–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ</h4>
                  </div>
                  <div className="section-content">
                    <p className="expert-text">{document.analysis.expertOpinion}</p>
                    {document.analysis.criticalIssues && document.analysis.criticalIssues.length > 0 && (
                      <div className="critical-section">
                        <strong>üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã:</strong>
                        <ul className="critical-list">
                          {document.analysis.criticalIssues.map((issue, idx) => (
                            <li key={idx}>{issue}</li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                </div>
              )}
              
              {/* Legal Errors */}
              {document.analysis.legalErrors && document.analysis.legalErrors.length > 0 && (
                <div className="analysis-section errors-section">
                  <div className="section-header">
                    <span className="section-icon">‚ö†Ô∏è</span>
                    <h4>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ ({document.analysis.legalErrors.length})</h4>
                  </div>
                  <div className="section-content">
                    {document.analysis.legalErrors.map((error, idx) => {
                      // Parse error if it's an object
                      let errorObj = error;
                      if (typeof error === 'string') {
                        errorObj = { description: error, severity: 'medium' };
                      }
                      
                      return (
                        <div key={idx} className={`error-box severity-${errorObj.severity || 'medium'}`}>
                          <div className="error-header-new">
                            <span className="error-type-badge">{errorObj.type || '–æ—à–∏–±–∫–∞'}</span>
                            <span className={`severity-badge severity-${errorObj.severity || 'medium'}`}>
                              {errorObj.severity || 'medium'}
                            </span>
                          </div>
                          <p className="error-text">{errorObj.description || error}</p>
                          {errorObj.location && (
                            <p className="error-meta"><strong>üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> {errorObj.location}</p>
                          )}
                          {errorObj.solution && (
                            <p className="error-meta"><strong>‚úÖ –†–µ—à–µ–Ω–∏–µ:</strong> {errorObj.solution}</p>
                          )}
                          {errorObj.basis && (
                            <p className="error-meta"><strong>üìú –û—Å–Ω–æ–≤–∞–Ω–∏–µ:</strong> {errorObj.basis}</p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
              
              {/* Risks */}
              {document.analysis.risks && document.analysis.risks.length > 0 && (
                <div className="analysis-section risks-section">
                  <div className="section-header">
                    <span className="section-icon">üö®</span>
                    <h4>–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏</h4>
                  </div>
                  {document.analysis.riskLevel && (
                    <div className="risk-level-bar">
                      <span>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</span>
                      <span className={`risk-level-badge level-${document.analysis.riskLevel.toLowerCase()}`}>
                        {document.analysis.riskLevel === 'high' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' : 
                         document.analysis.riskLevel === 'medium' ? 'üîµ –°—Ä–µ–¥–Ω–∏–π' : 
                         'üü¢ –ù–∏–∑–∫–∏–π'}
                      </span>
                    </div>
                  )}
                  <div className="risks-grid">
                    {document.analysis.risks.map((risk, idx) => {
                      let riskObj = risk;
                      if (typeof risk === 'string') {
                        riskObj = { title: risk, text: risk };
                      }
                      
                      return (
                        <div key={idx} className="risk-card">
                          <div className="risk-title">{riskObj.title || riskObj.category || '—Ä–∏—Å–∫'}</div>
                          <p className="risk-text">{riskObj.text || riskObj.description || risk}</p>
                          {riskObj.minimization && (
                            <p className="risk-meta"><strong>–ö–∞–∫ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å:</strong> {riskObj.minimization}</p>
                          )}
                          {riskObj.consequences && (
                            <p className="risk-meta"><strong>–ü—Ä–∞–≤–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:</strong> {riskObj.consequences}</p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
              
              {/* Recommendations */}
              {document.analysis.recommendations && document.analysis.recommendations.length > 0 && (
                <div className="analysis-section recommendations-section">
                  <div className="section-header">
                    <span className="section-icon">üí°</span>
                    <h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ì–∞–ª–∏–Ω—ã</h4>
                  </div>
                  <div className="recommendations-grid">
                    {document.analysis.recommendations.map((rec, idx) => {
                      let recObj = rec;
                      if (typeof rec === 'string') {
                        recObj = { title: rec, text: rec, priority: 'normal' };
                      } else if (typeof rec !== 'object' || rec === null) {
                        recObj = { title: String(rec), text: String(rec), priority: 'normal' };
                      }
                      
                      const priority = recObj.priority === 'high' || recObj.priority === 'critical' ? 'high' : 'normal';
                      const title = recObj.title || recObj.description || rec;
                      const description = recObj.text || recObj.description || '';
                      
                      return (
                        <div key={idx} className={`rec-card priority-${priority}`}>
                          <div className="rec-header-new">
                            <span className={`priority-dot priority-${priority}`}></span>
                            <strong>{title}</strong>
                          </div>
                          {description && description !== title && (
                            <p className="rec-text">{description}</p>
                          )}
                          {recObj.implementation && (
                            <p className="rec-meta"><strong>–ö–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:</strong> {recObj.implementation}</p>
                          )}
                          {recObj.timeline && (
                            <p className="rec-meta"><strong>–°—Ä–æ–∫–∏:</strong> {recObj.timeline}</p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
              
              {/* Next Steps */}
              {document.analysis.nextSteps && document.analysis.nextSteps.length > 0 && (
                <div className="analysis-section next-steps-section">
                  <div className="section-header">
                    <span className="section-icon">üéØ</span>
                    <h4>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏</h4>
                  </div>
                  <ol className="steps-list">
                    {document.analysis.nextSteps.map((step, idx) => {
                      const stepText = typeof step === 'string' ? step : (step.description || step.title || JSON.stringify(step));
                      return <li key={idx}>{stepText}</li>;
                    })}
                  </ol>
                </div>
              )}
              
              {/* Compliance */}
              {document.analysis.compliance && (
                <div className="analysis-section">
                  <div className="section-header">
                    <span className="section-icon">‚úÖ</span>
                    <h4>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º</h4>
                  </div>
                  <div className="section-content">
                    {getComplianceStatus(document.analysis.compliance)}
                  </div>
                </div>
              )}
              
              {/* Save Button */}
              <div className="preview-actions">
                <button className="save-btn" onClick={() => {
                  const analysis = JSON.stringify(document.analysis, null, 2);
                  const element = document.createElement('a');
                  const file = new Blob([analysis], { type: 'application/json' });
                  element.href = URL.createObjectURL(file);
                  element.download = `analysis_${document.name}_${Date.now()}.json`;
                  document.body.appendChild(element);
                  element.click();
                  document.body.removeChild(element);
                }}>
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-save">
                    <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path>
                    <polyline points="17 21 17 13 7 13 7 21"></polyline>
                    <polyline points="7 3 7 8 15 8"></polyline>
                  </svg>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑
                </button>
              </div>
            </div>
          )}
          
          {initialAnalysisData && (
            <div className="initial-analysis-raw">
              <h3>üïí –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ)</h3>
              <pre className="initial-analysis-json">{JSON.stringify(initialAnalysisData, null, 2)}</pre>
            </div>
          )}
          
          {document.analysis && (
            <div className="initial-analysis">
              <h3>üß† –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞</h3>
              <p><strong>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:</strong> {Array.isArray(document.analysis.summary?.mainIssues) ? document.analysis.summary.mainIssues.join(', ') : document.analysis.summary}</p>
              <p><strong>–†–∏—Å–∫–∏:</strong> {document.analysis.risks?.join(', ')}</p>
              <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong> {document.analysis.recommendations?.join(', ')}</p>
            </div>
          )}
        </div>
        
        <div className="chat-panel">
          <div className="chat-header">
            <div className="chat-title">
              <h3>üí¨ –ì–∞–ª–∏–Ω–∞</h3>
              <p>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫</p>
            </div>
          </div>
          
          <div className="chat-messages">
            {messages.map((message) => (
              <div key={message.id} className={`chat-message ${message.role}`}>
                <div className="message-content">
                  {message.content}
                </div>
                <div className="message-time">
                  {new Date(message.timestamp).toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="chat-message assistant">
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
          
          <div className="chat-input">
            <textarea
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ..."
              disabled={isLoading}
              rows="3"
            />
            <button 
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading}
              className="send-button"
            >
              <Send size={20} />
            </button>
          </div>
        </div>
      </div>
      </div>
    </div>
  );
};

export default DocumentDetailView;
