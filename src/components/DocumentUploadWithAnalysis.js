import React, { useState } from 'react';
import { Upload, FileText, Image, File, X, Brain, AlertTriangle, CheckCircle, Clock } from 'lucide-react';
import './DocumentUploadWithAnalysis.css';

const DocumentUploadWithAnalysis = () => {
  const [isUploading, setIsUploading] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [analysisResult, setAnalysisResult] = useState(null);
  const [error, setError] = useState(null);

  const handleFileSelect = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setIsUploading(true);
    setError(null);
    setAnalysisResult(null);

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      const formData = new FormData();
      formData.append('file', file);
      formData.append('userId', 'current-user'); // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª:', file.name, '—Ä–∞–∑–º–µ—Ä:', file.size);
      
      const uploadResponse = await fetch('/api/documents/upload', {
        method: 'POST',
        body: formData,
      });

      if (!uploadResponse.ok) {
        const errorText = await uploadResponse.text();
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', uploadResponse.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${uploadResponse.status}`);
      }

      const uploadData = await uploadResponse.json();
      setUploadedFile({
        name: file.name,
        size: file.size,
        type: file.type,
        content: uploadData.recognizedText || '–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω'
      });

      // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
      setIsAnalyzing(true);
      
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', file.name);
      console.log('–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', uploadData.recognizedText?.substring(0, 100) + '...');
      
      const analysisResponse = await fetch('/api/documents/advanced-analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          documentText: uploadData.recognizedText || '',
          documentName: file.name,
          userId: 'current-user'
        }),
      });

      if (!analysisResponse.ok) {
        const errorText = await analysisResponse.text();
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', analysisResponse.status, errorText);
        throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${analysisResponse.status}`);
      }

      const analysisData = await analysisResponse.json();
      console.log('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', analysisData);
      setAnalysisResult(analysisData);
      
    } catch (err) {
      setError(err.message);
      console.error('–û—à–∏–±–∫–∞:', err);
    } finally {
      setIsUploading(false);
      setIsAnalyzing(false);
    }
  };

  const getFileIcon = (fileType) => {
    if (fileType.startsWith('image/')) return <Image size={20} />;
    if (fileType.includes('pdf')) return <FileText size={20} />;
    return <File size={20} />;
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="document-upload-analysis">
      <div className="upload-section">
        <h3 className="upload-title">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
        <p className="upload-description">
          –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF, Word, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
        </p>
        
        <div className="upload-area">
          <input
            type="file"
            id="file-upload"
            accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png"
            onChange={handleFileSelect}
            disabled={isUploading || isAnalyzing}
            style={{ display: 'none' }}
          />
          <label htmlFor="file-upload" className="upload-button">
            <Upload size={24} />
            <span>
              {isUploading ? '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...' : isAnalyzing ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...' : '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'}
            </span>
          </label>
        </div>

        {uploadedFile && (
          <div className="uploaded-file">
            <div className="file-info">
              {getFileIcon(uploadedFile.type)}
              <div className="file-details">
                <span className="file-name">{uploadedFile.name}</span>
                <span className="file-size">{formatFileSize(uploadedFile.size)}</span>
              </div>
            </div>
          </div>
        )}

        {error && (
          <div className="error-message">
            <AlertTriangle size={16} />
            <span>{error}</span>
          </div>
        )}
      </div>

      {isAnalyzing && (
        <div className="analysis-loading">
          <div className="loading-spinner">
            <Brain size={24} className="spinning" />
          </div>
          <p>–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç...</p>
        </div>
      )}

      {analysisResult && (
        <div className="analysis-results">
          <h4 className="results-title">
            <CheckCircle size={20} />
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
          </h4>
          
          <div className="analysis-grid">
            <div className="analysis-card risks">
              <h5>üö® –†–∏—Å–∫–∏</h5>
              <div className="risk-level">
                <span className="level-label">–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</span>
                <span className={`level-value level-${analysisResult.data?.analysis?.summary?.riskLevel || 'medium'}`}>
                  {analysisResult.data?.analysis?.summary?.riskLevel === 'high' ? '–í—ã—Å–æ–∫–∏–π' : 
                   analysisResult.data?.analysis?.summary?.riskLevel === 'low' ? '–ù–∏–∑–∫–∏–π' : '–°—Ä–µ–¥–Ω–∏–π'}
                </span>
              </div>
              <ul className="risk-list">
                {analysisResult.data?.analysis?.risks?.map((risk, index) => (
                  <li key={index}>
                    <strong>{risk.category}:</strong> {risk.description}
                    <br />
                    <small>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {risk.probability}, –í–ª–∏—è–Ω–∏–µ: {risk.impact}</small>
                  </li>
                ))}
              </ul>
            </div>

            <div className="analysis-card recommendations">
              <h5>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h5>
              <ul className="recommendation-list">
                {analysisResult.data?.analysis?.recommendations?.map((rec, index) => (
                  <li key={index}>
                    <strong>{rec.category}:</strong> {rec.description}
                    <br />
                    <small>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec.priority}, –†–µ–∞–ª–∏–∑–∞—Ü–∏—è: {rec.implementation}</small>
                  </li>
                ))}
              </ul>
            </div>

            <div className="analysis-card compliance">
              <h5>‚öñÔ∏è –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ</h5>
              <div className="compliance-status">
                <span className="status-label">–°—Ç–∞—Ç—É—Å:</span>
                <span className={`status-value status-${analysisResult.data?.analysis?.summary?.overallQuality || 'medium'}`}>
                  {analysisResult.data?.analysis?.summary?.overallQuality === 'good' ? '–•–æ—Ä–æ—à–µ–µ' : 
                   analysisResult.data?.analysis?.summary?.overallQuality === 'poor' ? '–ü–ª–æ—Ö–æ–µ' : '–°—Ä–µ–¥–Ω–µ–µ'}
                </span>
              </div>
              <p className="compliance-note">
                {analysisResult.data?.analysis?.complianceIssues?.length > 0 
                  ? `–ù–∞–π–¥–µ–Ω–æ ${analysisResult.data.analysis.complianceIssues.length} –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è`
                  : '–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º'}
              </p>
            </div>

            <div className="analysis-card summary">
              <h5>üìã –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ</h5>
              <p className="summary-text">
                <strong>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:</strong> {analysisResult.data?.analysis?.summary?.documentType}<br />
                <strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</strong> {analysisResult.data?.analysis?.summary?.mainIssues?.join(', ')}<br />
                <strong>–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º:</strong> {analysisResult.data?.analysis?.statistics?.totalIssues}
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DocumentUploadWithAnalysis;
