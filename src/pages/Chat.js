/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–∞—Ç–∞ —Å —é—Ä–∏—Å—Ç–æ–º –ì–∞–ª–∏–Ω–æ–π
 * –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */
import React, { useState, useEffect, useRef, useCallback } from 'react';
import './Chat.css';

// Hooks
import { useChat } from '../hooks/useChat';
import { useAuth } from '../contexts/AuthContext';

// Components
import ChatSidebar from '../components/ChatSidebar';
import ChatEmpty from '../components/ChatEmpty';
import ChatLoading from '../components/ChatLoading';
import ChatMessage from '../components/ChatMessage';
import ChatInput from '../components/ChatInput';
import DocumentUpload from '../components/DocumentUpload';

// Utils
import { validateFile, extractTextFromFile, createDocumentObject } from '../utils/documentUtils';
import { 
  loadSessions, 
  createSession, 
  getSessionById, 
  upsertSession, 
  generateTitleFromMessages 
} from '../utils/chatStorage';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —á–∞—Ç–∞
 */
const Chat = () => {
  const { user } = useAuth();
  const messagesEndRef = useRef(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  const [showDocumentUpload, setShowDocumentUpload] = useState(false);
  const [sessions, setSessions] = useState(() => loadSessions());
  const [activeSessionId, setActiveSessionId] = useState(() => loadSessions()[0]?.id || null);

  // –•—É–∫ —á–∞—Ç–∞
  const {
    messages,
    isLoading,
    sendMessage,
    addSystemMessage,
    downloadDocument,
    setMessages
  } = useChat(user?.id || user?.email || null);

  /**
   * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
   */
  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, []);

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
   */
  useEffect(() => {
    if (!activeSessionId) {
      const newSession = createSession();
      const updatedSessions = upsertSession(sessions, newSession);
      setSessions(updatedSessions);
      setActiveSessionId(newSession.id);
      setMessages([]);
    } else {
      const currentSession = getSessionById(sessions, activeSessionId);
      if (currentSession) {
        setMessages(currentSession.messages || []);
      }
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  useEffect(() => {
    if (!activeSessionId || messages.length === 0) return;

    const currentSession = getSessionById(sessions, activeSessionId) || { id: activeSessionId };
    const updatedSession = {
      ...currentSession,
      title: generateTitleFromMessages(messages),
      messages,
      updatedAt: new Date().toISOString(),
      createdAt: currentSession.createdAt || new Date().toISOString()
    };

    // –ò–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    const hasChanged =
      !currentSession.title ||
      currentSession.title !== updatedSession.title ||
      !currentSession.messages ||
      currentSession.messages.length !== messages.length;

    if (hasChanged) {
      setSessions(prev => upsertSession(prev, updatedSession));
    }
  }, [messages, activeSessionId, sessions]);

  /**
   * –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  useEffect(() => {
    scrollToBottom();
  }, [messages, scrollToBottom]);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
   */
  const handleNewSession = useCallback(() => {
    const newSession = createSession();
    const updatedSessions = upsertSession(sessions, newSession);
    setSessions(updatedSessions);
    setActiveSessionId(newSession.id);
    setMessages([]);
  }, [sessions, setMessages]);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏
   */
  const handleSessionSelect = useCallback((sessionId) => {
    setActiveSessionId(sessionId);
    const selectedSession = getSessionById(sessions, sessionId);
    if (selectedSession) {
      setMessages(selectedSession.messages || []);
    }
  }, [sessions, setMessages]);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  const handleSendMessage = useCallback((message) => {
    sendMessage(message);
  }, [sendMessage]);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  const handleTextExtracted = useCallback((text, filename) => {
    createDocumentObject(
      { name: filename, size: text.length, type: 'text/plain' },
      text
    );

    setTimeout(() => {
      addSystemMessage(
        `üìÑ –î–æ–∫—É–º–µ–Ω—Ç "${filename}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É.`
      );
    }, 100);
  }, [addSystemMessage]);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
   */
  const handleFileUpload = useCallback(async (file) => {
    try {
      validateFile(file);
      
      const text = await extractTextFromFile(file);
      createDocumentObject(file, text);
      
      addSystemMessage(
        `üìÑ –§–∞–π–ª "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –†–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(1)}KB`
      );
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
      const analysisMessage = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç: ${text.substring(0, 500)}...`;
      sendMessage(analysisMessage);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
      addSystemMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  }, [addSystemMessage, sendMessage]);

  /**
   * –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  const handleRetryMessage = useCallback((messageId) => {
    const message = messages.find(m => m.id === messageId);
    if (message && message.type === 'bot') {
      const userMessageIndex = messages.findIndex(m => m.id === messageId) - 1;
      if (userMessageIndex >= 0) {
        const userMessage = messages[userMessageIndex];
        if (userMessage.type === 'user') {
          sendMessage(userMessage.content);
        }
      }
    }
  }, [messages, sendMessage]);

  return (
    <div className="chat-page">
      <div className="chat-container chat-layout">
        {/* –°–∞–π–¥–±–∞—Ä —Å–µ—Å—Å–∏–π */}
        <ChatSidebar
          sessions={sessions}
          activeSessionId={activeSessionId}
          onSessionSelect={handleSessionSelect}
          onNewSession={handleNewSession}
        />

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
        <div className="chat-main">
          {/* –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
          {showDocumentUpload && (
            <div className="chat-document-upload">
              <DocumentUpload
                onFileUpload={handleFileUpload}
                onTextExtracted={handleTextExtracted}
                onClose={() => setShowDocumentUpload(false)}
              />
            </div>
          )}
          
          {/* –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ */}
          <div className="chat-messages">
            {messages.length === 0 ? (
              <ChatEmpty onSuggestionClick={handleSendMessage} />
            ) : (
              messages.map((message, index) => (
                <ChatMessage
                  key={message.id}
                  message={message}
                  onRetry={handleRetryMessage}
                  onDownloadDocument={downloadDocument}
                  isLastMessage={index === messages.length - 1}
                />
              ))
            )}
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
            {isLoading && <ChatLoading />}
            
            {/* –Ø–∫–æ—Ä—å –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ */}
            <div ref={messagesEndRef} />
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <ChatInput
            onSendMessage={handleSendMessage}
            placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ì–∞–ª–∏–Ω–µ..."
            disabled={isLoading}
          />
        </div>
      </div>
    </div>
  );
};

export default Chat;
