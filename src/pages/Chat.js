import React, { useState, useEffect, useRef, useCallback } from 'react';
import { RefreshCw, Upload, FileText, Loader, Bot, Globe } from 'lucide-react';
import './Chat.css';

import { useChat } from '../hooks/useChat';
import { validateFile, extractTextFromFile, createDocumentObject } from '../utils/documentUtils';
import { loadSessions, createSession, getSessionById, upsertSession, generateTitleFromMessages } from '../utils/chatStorage';
import DocumentUpload from '../components/DocumentUpload';
import ChatMessage from '../components/ChatMessage';
import ChatInput from '../components/ChatInput';
import { useAuth } from '../contexts/AuthContext';
// import { LanguageContext } from '../App';
// import translations from '../data/translations';

const Chat = () => {
  // const { lang } = useContext(LanguageContext);
  const { user } = useAuth();
  const messagesEndRef = useRef(null);
  const [showDocumentUpload, setShowDocumentUpload] = useState(false);
  const [sessions, setSessions] = useState(() => loadSessions());
  const [activeSessionId, setActiveSessionId] = useState(() => loadSessions()[0]?.id || null);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏
  const {
    messages,
    isLoading,
    sendMessage,
    addSystemMessage,
    clearChat,
    downloadDocument,
    apiStatus,
    useWebSearch,
    setUseWebSearch,
    setMessages
  } = useChat(user?.id || user?.email || null); // –ü–µ—Ä–µ–¥–∞–µ–º userId –≤ useChat

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
  useEffect(() => {
    if (!activeSessionId) {
      const s = createSession();
      const updated = upsertSession(sessions, s);
      setSessions(updated);
      setActiveSessionId(s.id);
      setMessages([]);
    } else {
      const current = getSessionById(sessions, activeSessionId);
      if (current) setMessages(current.messages || []);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (!activeSessionId || messages.length === 0) return;

    const current = getSessionById(sessions, activeSessionId) || { id: activeSessionId };
    const updated = {
      ...current,
      title: generateTitleFromMessages(messages),
      messages,
      updatedAt: new Date().toISOString(),
      createdAt: current.createdAt || new Date().toISOString()
    };

    // –ò–∑–±–µ–≥–∞–µ–º –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    const hasChanged =
      !current.title ||
      current.title !== updated.title ||
      !current.messages ||
      current.messages.length !== messages.length;

    if (hasChanged) {
      setSessions(prev => upsertSession(prev, updated));
    }
  }, [messages, activeSessionId]); // eslint-disable-line react-hooks/exhaustive-deps

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  const handleTextExtracted = useCallback((text, filename) => {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
    createDocumentObject(
      { name: filename, size: text.length, type: 'text/plain' },
      text
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    setTimeout(() => {
      addSystemMessage(
        `üìÑ –î–æ–∫—É–º–µ–Ω—Ç "${filename}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É.`
      );
    }, 100);
  }, [addSystemMessage]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∞–Ω–∞–ª–∏–∑
  const handleForceReanalyze = () => {
    const reanalyzeMessage = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤, —Å—Ç–∞—Ç–µ–π –∑–∞–∫–æ–Ω–æ–≤ –∏ –≥–æ—Ç–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫";
    sendMessage(reanalyzeMessage, true);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = (message) => {
    sendMessage(message);
  };

  

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const handleFileUpload = async (file) => {
    try {
      validateFile(file);
      
      const text = await extractTextFromFile(file);
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
      createDocumentObject(file, text);
      
      addSystemMessage(
        `üìÑ –§–∞–π–ª "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –†–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(1)}KB`
      );
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
      const analysisMessage = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç: ${text.substring(0, 500)}...`;
      sendMessage(analysisMessage);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
      addSystemMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  };

  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleRetryMessage = (messageId) => {
    const message = messages.find(m => m.id === messageId);
    if (message && message.type === 'bot') {
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const userMessageIndex = messages.findIndex(m => m.id === messageId) - 1;
      if (userMessageIndex >= 0) {
        const userMessage = messages[userMessageIndex];
        if (userMessage.type === 'user') {
          sendMessage(userMessage.content);
        }
      }
    }
  };

  // –ü–µ—Ä–µ–≤–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  // const t = translations[lang] || translations.ru;

  const suggestions = [
    '–ü—Ä–æ–≤–µ—Ä—å –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã: —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
    '–ü–æ–¥—Å–∫–∞–∂–∏, –∫–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏—é –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É –¥–µ–Ω–µ–≥',
    '–ö–∞–∫–∏–µ –ø—É–Ω–∫—Ç—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–æ–≥–æ–≤–æ—Ä –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥?',
    '–†–∞–∑–±–µ—Ä–∏ —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä: –ø—Ä–∞–≤–∞ –∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ —Å—Ç–æ—Ä–æ–Ω'
  ];

  return (
    <div className="chat-page">
      <div className="chat-container chat-layout">
        {/* –°–∞–π–¥–±–∞—Ä —Å–µ—Å—Å–∏–π */}
        <aside className="chat-sidebar">
          <div className="sidebar-header">
            <strong>–ß–∞—Ç—ã</strong>
            <button className="chat-header__button" onClick={() => {
              const s = createSession();
              const updated = upsertSession(sessions, s);
              setSessions(updated);
              setActiveSessionId(s.id);
              setMessages([]);
            }}>+</button>
          </div>
          <div className="sidebar-list">
            {sessions.map(s => (
              <div key={s.id} className={`sidebar-item ${activeSessionId === s.id ? 'active' : ''}`} onClick={() => {
                setActiveSessionId(s.id);
                setMessages(s.messages || []);
              }}>
                <div className="sidebar-item__title">{s.title || '–ù–æ–≤—ã–π —á–∞—Ç'}</div>
                <div className="sidebar-item__time">{new Date(s.updatedAt).toLocaleString('ru-RU')}</div>
              </div>
            ))}
          </div>
        </aside>
        <div className="chat-main">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
        <div className="chat-header">
          <div className="chat-header__left">
            <div>
              <h2>ü§ñ AI –Æ—Ä–∏—Å—Ç –ì–∞–ª–∏–Ω–∞</h2>
              <div className="chat-header__subtitle">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</div>
            </div>
            <div className={`status-indicator ${apiStatus === 'connected' ? 'status-indicator--connected' : apiStatus === 'error' ? 'status-indicator--error' : ''}`}>
              {apiStatus === 'connected' ? '–û–Ω–ª–∞–π–Ω' : apiStatus === 'error' ? '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' : '–û–Ω–ª–∞–π–Ω'}
            </div>
          </div>

          <div className="chat-header__actions">
            <button
              className={`chat-header__button ${useWebSearch ? 'active' : ''}`}
              onClick={() => setUseWebSearch(!useWebSearch)}
              title={useWebSearch ? '–í–µ–±-–ø–æ–∏—Å–∫ –≤–∫–ª—é—á–µ–Ω' : '–í–µ–±-–ø–æ–∏—Å–∫ –≤—ã–∫–ª—é—á–µ–Ω'}
            >
              <Globe size={20} />
            </button>

            <button
              className="chat-header__button"
              onClick={() => setShowDocumentUpload(!showDocumentUpload)}
              title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"
            >
              <Upload size={20} />
            </button>
            
            <button
              className="chat-header__button"
              onClick={handleForceReanalyze}
              disabled={isLoading}
              title="–ü–µ—Ä–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
            >
              <RefreshCw size={20} className={isLoading ? 'spinning' : ''} />
            </button>
            
            <button
              className="chat-header__button"
              onClick={clearChat}
              title="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"
            >
              <FileText size={20} />
            </button>
          </div>
        </div>

        {/* –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
        {showDocumentUpload && (
          <div className="chat-document-upload">
            <DocumentUpload
              onFileUpload={handleFileUpload}
              onTextExtracted={handleTextExtracted}
              onClose={() => setShowDocumentUpload(false)}
            />
          </div>
        )}
          
        {/* –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ */}
        <div className="chat-messages">
          {messages.length === 0 ? (
            <div className="chat-empty">
              <Bot size={48} />
              <h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã</h3>
              <p>–Ø –ì–∞–ª–∏–Ω–∞, –≤–∞—à –ò–ò-—é—Ä–∏—Å—Ç. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–∏—Ç—É–∞—Ü–∏–∏.</p>
              <div className="chat-suggestions">
                {suggestions.map((s, i) => (
                  <button key={i} className="suggestion-chip" onClick={() => handleSendMessage(s)}>
                    {s}
                  </button>
                ))}
              </div>
            </div>
          ) : (
            messages.map((message, index) => (
              <ChatMessage
                key={message.id}
                message={message}
                onRetry={handleRetryMessage}
                onDownloadDocument={downloadDocument}
                isLastMessage={index === messages.length - 1}
              />
            ))
          )}
          
          {isLoading && (
            <div className="chat-loading">
              <Loader size={24} className="spinning" />
              <span>–ì–∞–ª–∏–Ω–∞ –¥—É–º–∞–µ—Ç...</span>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <ChatInput
          onSendMessage={handleSendMessage}
          placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ì–∞–ª–∏–Ω–µ..."
          disabled={isLoading}
        />
        </div>
      </div>
    </div>
  );
};

export default Chat; 