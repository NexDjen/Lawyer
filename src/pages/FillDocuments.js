import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { FileText, Upload, Download, Edit3, Save, RotateCcw, ArrowLeft } from 'lucide-react';
import './FillDocuments.css';

const FillDocuments = () => {
  const navigate = useNavigate();
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [filledDocument, setFilledDocument] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editedFields, setEditedFields] = useState({});

  // –®–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  const documentTemplates = [
    {
      id: 'contract',
      name: '–î–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏',
      description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
      icon: 'üìÑ',
      fields: ['seller', 'buyer', 'property', 'price', 'date', 'conditions']
    },
    {
      id: 'employment',
      name: '–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä',
      description: '–¢–∏–ø–æ–≤–æ–π —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º',
      icon: 'üëî',
      fields: ['employer', 'employee', 'position', 'salary', 'startDate', 'conditions']
    },
    {
      id: 'rental',
      name: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã',
      description: '–î–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã –∂–∏–ª–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è',
      icon: 'üè†',
      fields: ['landlord', 'tenant', 'property', 'rent', 'period', 'conditions']
    },
    {
      id: 'power_of_attorney',
      name: '–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
      description: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤',
      icon: 'üìã',
      fields: ['principal', 'agent', 'powers', 'period', 'notary', 'date']
    },
    {
      id: 'complaint',
      name: '–ñ–∞–ª–æ–±–∞',
      description: '–ñ–∞–ª–æ–±–∞ –≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã',
      icon: 'üìù',
      fields: ['applicant', 'respondent', 'issue', 'request', 'date', 'evidence']
    },
    {
      id: 'statement',
      name: '–ó–∞—è–≤–ª–µ–Ω–∏–µ',
      description: '–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥ –∏–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã',
      icon: 'üìÑ',
      fields: ['applicant', 'recipient', 'subject', 'request', 'date', 'attachments']
    }
  ];

  const handleTemplateSelect = (template) => {
    setSelectedTemplate(template);
    setEditedFields({});
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      setUploadedFile(file);
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
      setIsProcessing(true);
      setTimeout(() => {
        setIsProcessing(false);
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        const mockFilledDocument = {
          template: selectedTemplate,
          content: `–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ "${selectedTemplate.name}"`,
          fields: {
            seller: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            buyer: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
            property: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1, –∫–≤. 1',
            price: '5 000 000 —Ä—É–±–ª–µ–π',
            date: new Date().toLocaleDateString(),
            conditions: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞'
          }
        };
        setFilledDocument(mockFilledDocument);
      }, 2000);
    }
  };

  const handleFieldEdit = (fieldName, value) => {
    setEditedFields(prev => ({
      ...prev,
      [fieldName]: value
    }));
  };

  const handleSaveDocument = () => {
    // –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', filledDocument);
    setIsEditing(false);
  };

  const handleDownloadDocument = () => {
    // –õ–æ–≥–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const blob = new Blob([filledDocument.content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
    a.download = `${selectedTemplate.name}_–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="fill-documents-page">
      <div className="fill-documents-header">
        <button 
          className="back-button"
          onClick={() => navigate('/documents')}
        >
          <ArrowLeft size={20} />
          –ù–∞–∑–∞–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        </button>
        <h1>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h1>
        <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
      </div>

      <div className="fill-documents-content">
        {!selectedTemplate ? (
          <div className="templates-section">
            <h2>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞</h2>
            <div className="templates-grid">
              {documentTemplates.map((template) => (
                <div
                  key={template.id}
                  className="template-card"
                  onClick={() => handleTemplateSelect(template)}
                >
                  <div className="template-icon">
                    <span>{template.icon}</span>
                  </div>
                  <h3>{template.name}</h3>
                  <p>{template.description}</p>
                  <div className="template-fields">
                    <span>–ü–æ–ª—è: {template.fields.length}</span>
          </div>
        </div>
              ))}
        </div>
          </div>
        ) : !filledDocument ? (
          <div className="upload-section">
            <div className="selected-template">
              <h2>–í—ã–±—Ä–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω: {selectedTemplate.name}</h2>
              <p>{selectedTemplate.description}</p>
              <button 
                className="change-template-btn"
                onClick={() => setSelectedTemplate(null)}
              >
                –ò–∑–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω
              </button>
            </div>

            <div className="upload-area">
              <div className="upload-zone">
                <Upload size={48} />
                <h3>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è</h3>
                <p>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, DOCX, TXT</p>
                <input
                  type="file"
                  accept=".pdf,.doc,.docx,.txt"
                  onChange={handleFileUpload}
                  className="file-input"
                />
                <button className="upload-btn">–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</button>
              </div>
        </div>

            {isProcessing && (
              <div className="processing">
                <div className="spinner"></div>
                <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò...</p>
          </div>
        )}
      </div>
        ) : (
          <div className="result-section">
            <div className="result-header">
              <h2>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç</h2>
              <div className="result-actions">
                <button 
                  className="edit-btn"
                  onClick={() => setIsEditing(!isEditing)}
                >
                  <Edit3 size={16} />
                  {isEditing ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                </button>
                <button 
                  className="download-btn"
                  onClick={handleDownloadDocument}
                >
                  <Download size={16} />
                  –°–∫–∞—á–∞—Ç—å
                </button>
                <button 
                  className="new-btn"
                  onClick={() => {
                    setSelectedTemplate(null);
                    setFilledDocument(null);
                    setEditedFields({});
                  }}
                >
                  –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                </button>
        </div>
        </div>

            <div className="document-preview">
              <div className="document-content">
                <h3>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</h3>
                <div className="content-text">
                  {filledDocument.content}
        </div>
      </div>

              {isEditing && (
                <div className="fields-editor">
                  <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π:</h3>
                  {Object.entries(filledDocument.fields).map(([field, value]) => (
                    <div key={field} className="field-editor">
                      <label>{field}:</label>
                      <input
                        type="text"
                        value={editedFields[field] || value}
                        onChange={(e) => handleFieldEdit(field, e.target.value)}
                      />
                    </div>
                  ))}
                  <button 
                    className="save-btn"
                    onClick={handleSaveDocument}
                  >
                    <Save size={16} />
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
          </button>
                </div>
              )}
            </div>
      </div>
        )}
      </div>
    </div>
  );
};

export default FillDocuments;