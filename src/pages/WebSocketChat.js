import React, { useState, useRef, useEffect } from 'react';
import { useWebSocketChat } from '../hooks/useWebSocketChat';
import './WebSocketChat.css';

const WebSocketChat = () => {
  const {
    isConnected,
    messages,
    isLoading,
    error,
    isAudioEnabled,
    sendMessage,
    initializeAudioContext,
    reconnectAttempts
  } = useWebSocketChat();

  const [inputMessage, setInputMessage] = useState('');
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSubmit = (e) => {
    e.preventDefault();
    if (inputMessage.trim() && !isLoading && isConnected) {
      sendMessage(inputMessage.trim());
      setInputMessage('');
    }
  };

  const handleEnableVoice = async () => {
    try {
      await initializeAudioContext();
    } catch (error) {
      console.error('Failed to enable voice:', error);
    }
  };

  const formatTime = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getConnectionStatus = () => {
    if (!isConnected) {
      return reconnectAttempts > 0 
        ? `üî¥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ... (${reconnectAttempts}/5)`
        : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ';
    }
    return 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
  };

  return (
    <div className="websocket-chat">
      <div className="chat-header">
        <h2>Windex-–Æ—Ä–∏—Å—Ç - –ñ–∏–≤–æ–π –î–∏–∞–ª–æ–≥</h2>
        <div className="connection-status">
          <span className={`status-indicator ${isConnected ? 'connected' : 'disconnected'}`}>
            {getConnectionStatus()}
          </span>
          {!isAudioEnabled && (
            <button
              className="enable-voice-btn"
              onClick={handleEnableVoice}
              disabled={!isConnected}
            >
              üé§ –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å
            </button>
          )}
          {isAudioEnabled && (
            <span className="voice-enabled">üé§ –ì–æ–ª–æ—Å –≤–∫–ª—é—á–µ–Ω</span>
          )}
        </div>
      </div>

      {error && (
        <div className="error-message">
          ‚ùå {error}
          {!isConnected && reconnectAttempts < 5 && (
            <div className="reconnect-info">
              –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...
            </div>
          )}
        </div>
      )}

      <div className="messages-container">
        {messages.length === 0 && !isLoading && (
          <div className="welcome-message">
            <h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h3>
            <p>–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∏ AI —é—Ä–∏—Å—Ç –ì–∞–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≥–æ–ª–æ—Å–æ–º.</p>
            <p>üí° <strong>–°–æ–≤–µ—Ç:</strong> –í–∫–ª—é—á–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥.</p>
            {!isConnected && (
              <div className="connection-warning">
                ‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...
              </div>
            )}
          </div>
        )}

        {messages.map((message) => (
          <div
            key={message.id}
            className={`message ${message.type === 'user' ? 'user-message' : 'assistant-message'}`}
          >
            <div className="message-content">
              <div className="message-text">{message.content}</div>
              <div className="message-time">
                {formatTime(message.timestamp)}
              </div>
            </div>
            <div className="message-avatar">
              {message.type === 'user' ? 'üë§' : '‚öñÔ∏è'}
            </div>
          </div>
        ))}

        {isLoading && (
          <div className="message assistant-message">
            <div className="message-content">
              <div className="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
              </div>
            </div>
            <div className="message-avatar">‚öñÔ∏è</div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      <form className="input-form" onSubmit={handleSubmit}>
        <div className="input-container">
          <input
            ref={inputRef}
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            placeholder={isConnected ? "–ó–∞–¥–∞–π—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å..." : "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."}
            disabled={!isConnected || isLoading}
            className="message-input"
          />
          <button
            type="submit"
            disabled={!inputMessage.trim() || !isConnected || isLoading}
            className="send-button"
          >
            {isLoading ? '‚è≥' : 'üì§'}
          </button>
        </div>
      </form>

      <div className="chat-info">
        <p>
          üí° <strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong>
        </p>
        <ul>
          <li>üé§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤</li>
          <li>‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∞—É–¥–∏–æ</li>
          <li>üîó –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
          <li>üéØ –¢–æ—á–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</li>
          <li>üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</li>
        </ul>
      </div>
    </div>
  );
};

export default WebSocketChat; 