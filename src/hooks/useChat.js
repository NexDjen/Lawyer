import { useState, useCallback } from 'react';
import { safeFetchWithFallback, getFallbackNews } from '../utils/safeJson';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API
const API_ENDPOINTS = {
  CHAT: '/api/chat',
  NEWS: '/api/news'
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
const API_STATUS = {
  CONNECTED: 'connected',
  ERROR: 'error',
  LOADING: 'loading'
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
const MESSAGE_TYPES = {
  USER: 'user',
  BOT: 'bot',
  SYSTEM: 'system'
};

export const useChat = (userId = null) => {
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isRetrying, setIsRetrying] = useState(false);
  const [retryCount, setRetryCount] = useState(0);
  const [apiStatus, setApiStatus] = useState(API_STATUS.CONNECTED);
  const [useWebSearch, setUseWebSearch] = useState(true);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI
  const formatAIResponse = useCallback((response) => {
    const templatePhrases = [
      '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏',
      '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è',
      '–î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –æ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ',
      '–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
      '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
      '–ù–µ —É–∫–∞–∑–∞–Ω—ã —Å–∞–Ω–∫—Ü–∏–∏',
      '–í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–¥–µ–ª –æ–± –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏',
      '–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è',
      '–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏',
      '–†–∏—Å–∫–∏',
      '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É'
    ];

    const hasTemplatePhrases = templatePhrases.some(phrase => 
      response.toLowerCase().includes(phrase.toLowerCase())
    );

    const hasAnalysisStructure = response.includes('üìÑ –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê') || 
                                response.includes('üîç –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞') ||
                                response.includes('üë• –°—Ç–æ—Ä–æ–Ω—ã');

    if (hasTemplatePhrases && !hasAnalysisStructure) {
      return `üìÑ –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê

üîç –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: [–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞]

üë• –°—Ç–æ—Ä–æ–Ω—ã: [–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏]

üìã –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:
‚úÖ [–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ —É—Å–ª–æ–≤–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º –ø—É–Ω–∫—Ç–∞]

üü¢ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:
‚úîÔ∏è [–¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—è–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞]

‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:
‚ùå [–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–≤]

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫:
‚úÖ [–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥–¥–µ –∏—Ö –≤—Å—Ç–∞–≤–∏—Ç—å]

‚öñÔ∏è –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É:
üìã –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞:
- [–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥–ª–∞–≤—ã –∏ —Å—Ç–∞—Ç—å–∏]

‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:
- [–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–µ–π]

‚ùå –¢—Ä–µ–±—É—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏:
- [–¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å —á—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–µ–π]

üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:
üí° [–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è]
üí° [–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è]

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: AI –≤—ã–¥–∞–ª —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏.

üí° –ü–û–î–°–ö–ê–ó–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–Ω–æ–≤–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤, —Å—Ç–∞—Ç–µ–π –∑–∞–∫–æ–Ω–æ–≤ –∏ –≥–æ—Ç–æ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫"`;
    }

    if (response.includes('\n')) {
      return response;
    }

    if (response.includes('–ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê') || response.includes('–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞')) {
      return response
        .replace(/(üìÑ –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê)/g, '\n\n$1\n')
        .replace(/(üîç –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:)/g, '\n$1')
        .replace(/(üë• –°—Ç–æ—Ä–æ–Ω—ã:)/g, '\n\n$1')
        .replace(/(üìã –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:)/g, '\n\n$1')
        .replace(/(üü¢ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:)/g, '\n\n$1')
        .replace(/(‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:)/g, '\n\n$1')
        .replace(/(üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)/g, '\n\n$1')
        .replace(/(‚öñÔ∏è –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É:)/g, '\n\n$1')
        .replace(/(üìã –ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞:)/g, '\n$1')
        .replace(/(‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:)/g, '\n\n$1')
        .replace(/(‚ùå –¢—Ä–µ–±—É—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏:)/g, '\n\n$1')
        .replace(/(üéØ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã)/g, '\n\n$1')
        .replace(/(‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ)/g, '\n\n$1\n');
    }

    return response;
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
  const handleApiError = useCallback((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ WindexAI API:', error);
    setApiStatus(API_STATUS.ERROR);
    
    let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.';
    
    if (error.message.includes('400')) {
      errorMessage = 'WindexAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else if (error.message.includes('401') || error.message.includes('403')) {
      errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WindexAI API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.';
    } else if (error.message.includes('429')) {
      errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ WindexAI API. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
    } else if (error.message.includes('500')) {
      errorMessage = '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
    
    return {
      id: Date.now() + 1,
      type: MESSAGE_TYPES.BOT,
      content: errorMessage,
      timestamp: new Date()
    };
  }, []);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback(async (message, forceSend = false) => {
    if (!message.trim() && !forceSend) return;

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ (free: 10 —Å–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å)
    try {
      const currentUserRaw = localStorage.getItem('currentUser');
      if (currentUserRaw) {
        const currentUser = JSON.parse(currentUserRaw);
        const today = new Date().toISOString().slice(0, 10);
        const isNewDay = currentUser.lastUsageDate !== today;
        if (isNewDay) {
          currentUser.dailyMessages = 0;
          currentUser.lastUsageDate = today;
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        currentUser.dailyMessages = (currentUser.dailyMessages || 0) + 1;
        localStorage.setItem('currentUser', JSON.stringify(currentUser));
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ users
        const users = JSON.parse(localStorage.getItem('users') || '[]');
        const idx = users.findIndex(u => u.id === currentUser.id);
        if (idx >= 0) {
          users[idx] = currentUser;
          localStorage.setItem('users', JSON.stringify(users));
        }
      }
    } catch (_) {}

    const userMessage = {
      id: Date.now(),
      type: MESSAGE_TYPES.USER,
      content: message,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    setApiStatus(API_STATUS.LOADING);

    try {
      const response = await fetch(API_ENDPOINTS.CHAT, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          conversationHistory: messages.slice(-10),
          useWebSearch: useWebSearch,
          userId: userId // –î–æ–±–∞–≤–ª—è–µ–º userId –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        })
      });

      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
        } catch (e) {
          errorData = { error: `HTTP ${response.status}: ${response.statusText}` };
        }
        throw new Error(`${response.status}: ${errorData.error || 'Unknown error'}`);
      }

      // Clone the response before reading to allow fallback to text
      const responseClone = response.clone();
      let data;
      try {
        data = await response.json();
      } catch (e) {
        // If JSON parsing fails, read text from cloned response
        const textContent = await responseClone.text();
        data = { response: textContent };
      }
      const botMessage = {
        id: Date.now() + 1,
        type: MESSAGE_TYPES.BOT,
        content: formatAIResponse(data.response),
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
      setApiStatus(API_STATUS.CONNECTED);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const wantsDoc = /–¥–æ–∫—É–º–µ–Ω—Ç|–ø—Ä–µ—Ç–µ–Ω–∑–∏|–∑–∞—è–≤–ª–µ–Ω–∏|–¥–æ–≥–æ–≤–æ—Ä|—Å–∫–∞—á–∞—Ç—å|docx/i.test(data.response || '');
      if (wantsDoc) {
        data.hasDownloadableContent = true;
      }



    } catch (error) {
      const errorMessage = handleApiError(error);
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
      setIsRetrying(false);
      setRetryCount(0);
    }
  }, [messages, useWebSearch, userId, formatAIResponse, handleApiError]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
  const getLegalNews = useCallback(async () => {
    try {
      const news = await safeFetchWithFallback(
        () => fetch(API_ENDPOINTS.NEWS),
        getFallbackNews
      );
      return news;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
      return getFallbackNews();
    }
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const addSystemMessage = useCallback((content) => {
    const systemMessage = {
      id: Date.now(),
      type: MESSAGE_TYPES.SYSTEM,
      content,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, systemMessage]);
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
  const clearChat = useCallback(() => {
    setMessages([]);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
  const downloadDocument = useCallback(async (messageContent, title = '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç') => {
    try {
      const resp = await fetch('/api/chat/generate-docx', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: title,
          content: messageContent.replace(/\n{2,}/g, '\n')
        })
      });

      if (resp.ok) {
        const blob = await resp.blob();
        const url = URL.createObjectURL(blob);
        const downloadLink = document.createElement('a');
        downloadLink.href = url;
        downloadLink.download = `${title}-${Date.now()}.docx`;
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
        URL.revokeObjectURL(url);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    }
  }, []);

  return {
    messages,
    isLoading,
    isRetrying,
    retryCount,
    apiStatus,
    useWebSearch,
    setUseWebSearch,
    sendMessage,
    getLegalNews,
    addSystemMessage,
    clearChat,
    downloadDocument,
    setRetryCount,
    setIsRetrying,
    setMessages
  };
}; 