#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å–∫: node scripts/test-database.js
 */

const database = require('../database/database');
const User = require('../models/User');
const ChatSession = require('../models/ChatSession');
const Document = require('../models/Document');
const WindexAIStats = require('../models/WindexAIStats');
const logger = require('../utils/logger');

class DatabaseTester {
  constructor() {
    this.testResults = {
      passed: 0,
      failed: 0,
      tests: []
    };
  }

  async runTests() {
    logger.info('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.testDatabaseConnection();
      
      // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.testUserCreation();
      
      // –¢–µ—Å—Ç 3: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.testUserAuthentication();
      
      // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
      await this.testChatSessionCreation();
      
      // –¢–µ—Å—Ç 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      await this.testMessageHandling();
      
      // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      await this.testDocumentCreation();
      
      // –¢–µ—Å—Ç 7: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WindexAI
      await this.testWindexAIStats();
      
      // –¢–µ—Å—Ç 8: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.testUserProfile();
      
      // –¢–µ—Å—Ç 9: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await this.testTransactions();
      
      // –¢–µ—Å—Ç 10: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      await this.testPerformance();
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.showResults();
      
    } catch (error) {
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  async testDatabaseConnection() {
    try {
      const stats = await database.getStats();
      this.addTestResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', true, `–ù–∞–π–¥–µ–Ω–æ ${stats.length} —Ç–∞–±–ª–∏—Ü`);
    } catch (error) {
      this.addTestResult('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î', false, error.message);
    }
  }

  async testUserCreation() {
    try {
      const testUser = await User.create({
        name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: 'test@example.com',
        password: 'testpassword123',
        role: 'user'
      });
      
      this.addTestResult('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', true, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${testUser.id}`);
      return testUser;
    } catch (error) {
      this.addTestResult('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', false, error.message);
      return null;
    }
  }

  async testUserAuthentication() {
    try {
      const user = await User.authenticate('test@example.com', 'testpassword123');
      this.addTestResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', true, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.name}`);
      return user;
    } catch (error) {
      this.addTestResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', false, error.message);
      return null;
    }
  }

  async testChatSessionCreation() {
    try {
      const user = await User.findByEmail('test@example.com');
      if (!user) {
        this.addTestResult('–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞', false, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
      }

      const session = await ChatSession.create(user.id, '–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è');
      this.addTestResult('–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞', true, `–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${session.id}`);
      return session;
    } catch (error) {
      this.addTestResult('–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞', false, error.message);
      return null;
    }
  }

  async testMessageHandling() {
    try {
      const user = await User.findByEmail('test@example.com');
      const sessions = await ChatSession.findByUserId(user.id, 1);
      
      if (sessions.length === 0) {
        this.addTestResult('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', false, '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const session = sessions[0];
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      await session.addMessage({
        type: 'user',
        content: '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!'
      });

      await session.addMessage({
        type: 'bot',
        content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.'
      });

      const messages = await session.getMessages();
      this.addTestResult('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', true, `–î–æ–±–∞–≤–ª–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    } catch (error) {
      this.addTestResult('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π', false, error.message);
    }
  }

  async testDocumentCreation() {
    try {
      const user = await User.findByEmail('test@example.com');
      
      const document = await Document.create({
        userId: user.id,
        filename: 'test-document.pdf',
        originalName: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.pdf',
        filePath: '/uploads/test-document.pdf',
        fileSize: 1024,
        mimeType: 'application/pdf',
        documentType: 'contract',
        extractedText: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        ocrConfidence: 0.95
      });

      this.addTestResult('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞', true, `–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${document.id}`);
      return document;
    } catch (error) {
      this.addTestResult('–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞', false, error.message);
      return null;
    }
  }

  async testWindexAIStats() {
    try {
      const user = await User.findByEmail('test@example.com');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await WindexAIStats.record({
        userId: user.id,
        requestType: 'chat',
        model: 'gpt-4o-mini',
        tokensUsed: 150,
        cost: 0.0003,
        responseTime: 1200
      });

      const stats = await WindexAIStats.getOverallStats();
      this.addTestResult('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WindexAI', true, `–ó–∞–ø–∏—Å–µ–π: ${stats.total_requests}, –¢–æ–∫–µ–Ω–æ–≤: ${stats.total_tokens}`);
    } catch (error) {
      this.addTestResult('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ WindexAI', false, error.message);
    }
  }

  async testUserProfile() {
    try {
      const user = await User.findByEmail('test@example.com');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      await user.updateProfile({
        personalData: {
          fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          phone: '+7 (999) 123-45-67',
          address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1'
        },
        caseNotes: [
          {
            id: 'note_1',
            content: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞ –æ –¥–µ–ª–µ',
            importance: 7,
            tags: ['—Ç–µ—Å—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç—ã'],
            createdAt: new Date().toISOString()
          }
        ],
        preferences: {
          language: 'ru',
          notifications: true
        }
      });

      const profile = await user.getProfile();
      this.addTestResult('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', true, `–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, –∑–∞–º–µ—Ç–æ–∫: ${profile.caseNotes.length}`);
    } catch (error) {
      this.addTestResult('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', false, error.message);
    }
  }

  async testTransactions() {
    try {
      await database.transaction(async (db) => {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const user = await User.create({
          name: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: 'transaction@example.com',
          password: 'transaction123',
          role: 'user'
        });

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        const session = await ChatSession.create(user.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await session.addMessage({
          type: 'user',
          content: '–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
        });
      });

      this.addTestResult('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', true, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      this.addTestResult('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', false, error.message);
    }
  }

  async testPerformance() {
    try {
      const startTime = Date.now();
      
      // –°–æ–∑–¥–∞–µ–º 100 –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const promises = [];
      for (let i = 0; i < 100; i++) {
        promises.push(WindexAIStats.record({
          userId: null,
          requestType: 'performance_test',
          model: 'gpt-4o-mini',
          tokensUsed: Math.floor(Math.random() * 1000),
          cost: Math.random() * 0.01,
          responseTime: Math.floor(Math.random() * 5000)
        }));
      }
      
      await Promise.all(promises);
      
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      this.addTestResult('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', true, `100 –∑–∞–ø–∏—Å–µ–π –∑–∞ ${duration}ms (${(1000/duration*100).toFixed(0)} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫)`);
    } catch (error) {
      this.addTestResult('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', false, error.message);
    }
  }

  addTestResult(testName, passed, message) {
    this.testResults.tests.push({
      name: testName,
      passed,
      message
    });
    
    if (passed) {
      this.testResults.passed++;
      logger.info(`‚úÖ ${testName}: ${message}`);
    } else {
      this.testResults.failed++;
      logger.error(`‚ùå ${testName}: ${message}`);
    }
  }

  showResults() {
    logger.info('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    logger.info(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testResults.passed}`);
    logger.info(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testResults.failed}`);
    logger.info(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((this.testResults.passed / (this.testResults.passed + this.testResults.failed)) * 100).toFixed(1)}%`);
    
    if (this.testResults.failed > 0) {
      logger.info('\n‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
      this.testResults.tests
        .filter(test => !test.passed)
        .forEach(test => logger.info(`  - ${test.name}: ${test.message}`));
    }
    
    if (this.testResults.passed === this.testResults.tests.length) {
      logger.info('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      logger.warn('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.');
    }
  }

  async cleanup() {
    try {
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      await database.run('DELETE FROM windexai_stats WHERE request_type = ?', ['performance_test']);
      await database.run('DELETE FROM users WHERE email LIKE ?', ['%example.com']);
      logger.info('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      logger.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new DatabaseTester();
  
  try {
    await tester.runTests();
    await tester.cleanup();
    
    if (tester.testResults.failed === 0) {
      logger.info('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    } else {
      logger.warn('‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏.');
      process.exit(1);
    }
  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = DatabaseTester;
