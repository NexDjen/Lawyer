#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ SQLite
 * –ó–∞–ø—É—Å–∫: node scripts/migrate-to-sqlite.js
 */

const fs = require('fs').promises;
const path = require('path');
const database = require('../database/database');
const User = require('../models/User');
const logger = require('../utils/logger');

class DataMigrator {
  constructor() {
    this.dataDir = path.join(__dirname, '../data');
    this.usersFile = path.join(this.dataDir, 'users.json');
    this.statsFile = path.join(this.dataDir, 'windexai_stats.json');
    this.dailyStatsFile = path.join(this.dataDir, 'daily_stats.json');
  }

  async migrate() {
    try {
      logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ SQLite...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      await this.checkDataFiles();
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.migrateUsers();
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.migrateStats();
      
      // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      await this.createDemoUsers();
      
      logger.info('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async checkDataFiles() {
    try {
      await fs.access(this.dataDir);
      logger.info('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞');
    } catch {
      logger.info('üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö...');
      await fs.mkdir(this.dataDir, { recursive: true });
    }
  }

  async migrateUsers() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ
      const existingUsers = await User.findAll(1, 0);
      if (existingUsers.length > 0) {
        logger.info('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      logger.info('üë• –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      
      const demoUsers = [
        {
          name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          email: 'admin@mail.ru',
          password: 'admin123',
          role: 'admin'
        },
        {
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: 'user@test.com',
          password: 'user123',
          role: 'user'
        },
        {
          name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
          email: 'ivan@example.com',
          password: 'password123',
          role: 'user'
        }
      ];

      for (const userData of demoUsers) {
        try {
          await User.create(userData);
          logger.info(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${userData.email}`);
        } catch (error) {
          if (error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
            logger.info(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${userData.email}`);
          } else {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.email}:`, error.message);
          }
        }
      }

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }

  async migrateStats() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–∞–∑–µ
      const existingStats = await database.get(`
        SELECT COUNT(*) as count FROM windexai_stats
      `);
      
      if (existingStats.count > 0) {
        logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
        return;
      }

      logger.info('üìä –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

      // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const demoStats = [
        {
          userId: null,
          requestType: 'chat',
          model: 'gpt-4o-mini',
          tokensUsed: 150,
          cost: 0.0003,
          responseTime: 1200
        },
        {
          userId: null,
          requestType: 'chat',
          model: 'gpt-4o-mini',
          tokensUsed: 200,
          cost: 0.0004,
          responseTime: 1500
        },
        {
          userId: null,
          requestType: 'document_analysis',
          model: 'gpt-4o-mini',
          tokensUsed: 300,
          cost: 0.0006,
          responseTime: 2000
        }
      ];

      for (const stat of demoStats) {
        await database.run(`
          INSERT INTO windexai_stats (user_id, request_type, model, tokens_used, cost, response_time, created_at)
          VALUES (?, ?, ?, ?, ?, ?, datetime('now', '-' || abs(random() % 7) || ' days'))
        `, [stat.userId, stat.requestType, stat.model, stat.tokensUsed, stat.cost, stat.responseTime]);
      }

      logger.info('‚úÖ –î–µ–º–æ-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');

    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  async createDemoUsers() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      const users = await User.findAll(1, 0);
      if (users.length === 0) {
        logger.info('üë• –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
        await User.create({
          name: '–°–∏—Å—Ç–µ–º–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          email: 'admin@system.com',
          password: 'admin123',
          role: 'admin'
        });

        // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await User.create({
          name: '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          email: 'demo@user.com',
          password: 'demo123',
          role: 'user'
        });

        logger.info('‚úÖ –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    }
  }

  async showStats() {
    try {
      const stats = await database.getStats();
      logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
      stats.forEach(stat => {
        logger.info(`  ${stat.table_name}: ${stat.count} –∑–∞–ø–∏—Å–µ–π`);
      });
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
async function main() {
  const migrator = new DataMigrator();
  
  try {
    await migrator.migrate();
    await migrator.showStats();
    
    logger.info('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
    process.exit(0);
  } catch (error) {
    logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = DataMigrator;
