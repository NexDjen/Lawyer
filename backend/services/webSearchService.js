/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Google Custom Search API –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
 */

const https = require('https');
const http = require('http');
const { HttpsProxyAgent } = require('https-proxy-agent');
const logger = require('../utils/logger');
const config = require('../config/config');

class WebSearchService {
  constructor() {
    this.userAgent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36';
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    this.proxyAgent = null;
    if (process.env.HTTP_PROXY || process.env.HTTPS_PROXY) {
      const proxyUrl = process.env.HTTPS_PROXY || process.env.HTTP_PROXY;
      this.proxyAgent = new HttpsProxyAgent(proxyUrl);
      logger.info('WebSearchService: Proxy configured', { proxyUrl });
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param {number} maxResults - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  async searchCourtPractice(query, maxResults = 5) {
    try {
      logger.info('üîç Searching court practice', { query, maxResults });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
      const searchQuery = `${query} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –í–µ—Ä—Ö–æ–≤–Ω—ã–π –°—É–¥ –†–§`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
      const results = await Promise.allSettled([
        this.searchSudActRu(query),
        this.searchConsultantRu(query),
        this.searchGarantRu(query)
      ]);

      const allResults = [];
      results.forEach(result => {
        if (result.status === 'fulfilled' && result.value) {
          allResults.push(...result.value);
        }
      });

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const limitedResults = allResults.slice(0, maxResults);

      logger.info('‚úÖ Court practice search completed', { 
        foundResults: allResults.length, 
        returnedResults: limitedResults.length 
      });

      return limitedResults;
    } catch (error) {
      logger.error('‚ùå Error searching court practice', { error: error.message });
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –Ω–∞ —Å–∞–π—Ç–µ sudact.ru (–±–∞–∑–∞ —Å—É–¥–µ–±–Ω—ã—Ö –∞–∫—Ç–æ–≤)
   */
  async searchSudActRu(query) {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –∑–∞–ø—Ä–æ—Å –∫ sudact.ru
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      logger.info('Searching sudact.ru', { query });
      return [];
    } catch (error) {
      logger.error('Error searching sudact.ru', { error: error.message });
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –Ω–∞ —Å–∞–π—Ç–µ consultant.ru
   */
  async searchConsultantRu(query) {
    try {
      logger.info('Searching consultant.ru', { query });
      return [];
    } catch (error) {
      logger.error('Error searching consultant.ru', { error: error.message });
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –Ω–∞ —Å–∞–π—Ç–µ garant.ru
   */
  async searchGarantRu(query) {
    try {
      logger.info('Searching garant.ru', { query });
      return [];
    } catch (error) {
      logger.error('Error searching garant.ru', { error: error.message });
      return [];
    }
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∞)
   */
  async searchWeb(query, maxResults = 5) {
    try {
      logger.info('üîç Web search started', { query, maxResults });

      const searchUrl = `https://api.duckduckgo.com/?q=${encodeURIComponent(query)}&format=json&no_html=1&skip_disambig=1`;

      const results = await this.makeHttpRequest(searchUrl);
      
      if (results && results.RelatedTopics) {
        const formattedResults = results.RelatedTopics
          .filter(topic => topic.Text && topic.FirstURL)
          .slice(0, maxResults)
          .map(topic => ({
            title: topic.Text.substring(0, 100),
            url: topic.FirstURL,
            snippet: topic.Text
          }));

        logger.info('‚úÖ Web search completed', { foundResults: formattedResults.length });
        return formattedResults;
      }

      return [];
    } catch (error) {
      logger.error('‚ùå Error in web search', { error: error.message });
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—É–¥–µ–±–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  async searchWithContext(userMessage, maxResults = 3) {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const keywords = this.extractKeywords(userMessage);
      
      if (keywords.length === 0) {
        return null;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const searchQuery = `${keywords.join(' ')} —Å—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –í–° –†–§`;
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
      const courtResults = await this.searchCourtPractice(searchQuery, maxResults);
      
      if (courtResults.length === 0) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, –¥–µ–ª–∞–µ–º –æ–±—â–∏–π –≤–µ–±-–ø–æ–∏—Å–∫
        const webResults = await this.searchWeb(searchQuery, maxResults);
        return this.formatSearchResults(webResults, 'general');
      }

      return this.formatSearchResults(courtResults, 'court');
    } catch (error) {
      logger.error('Error in searchWithContext', { error: error.message });
      return null;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  extractKeywords(message) {
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const stopWords = ['—è', '–º–Ω–µ', '–º–æ–π', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–∫–∞–∫', '—á—Ç–æ', '—ç—Ç–æ', '–±—ã–ª', '–±—ã—Ç—å', '–µ—Å—Ç—å'];
    const words = message.toLowerCase()
      .replace(/[^\w–∞-—è—ë\s]/gi, ' ')
      .split(/\s+/)
      .filter(word => word.length > 3 && !stopWords.includes(word));
    
    return [...new Set(words)].slice(0, 5);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
   */
  formatSearchResults(results, type = 'general') {
    if (!results || results.length === 0) {
      return null;
    }

    const header = type === 'court' 
      ? '\n\nüìö –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –°–£–î–ï–ë–ù–ê–Ø –ü–†–ê–ö–¢–ò–ö–ê:\n'
      : '\n\nüåê –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:\n';

    const formattedResults = results.map((result, index) => {
      return `${index + 1}. ${result.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${result.url || '–ù–µ—Ç URL'}
${result.snippet || result.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;
    }).join('\n\n');

    return header + formattedResults;
  }

  /**
   * HTTP –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏
   */
  makeHttpRequest(url) {
    return new Promise((resolve, reject) => {
      const urlObj = new URL(url);
      const options = {
        hostname: urlObj.hostname,
        path: urlObj.pathname + urlObj.search,
        method: 'GET',
        headers: {
          'User-Agent': this.userAgent,
          'Accept': 'application/json'
        }
      };

      if (this.proxyAgent) {
        options.agent = this.proxyAgent;
      }

      const protocol = urlObj.protocol === 'https:' ? https : http;
      
      const req = protocol.request(options, (res) => {
        let data = '';

        res.on('data', (chunk) => {
          data += chunk;
        });

        res.on('end', () => {
          try {
            const jsonData = JSON.parse(data);
            resolve(jsonData);
          } catch (error) {
            resolve(data);
          }
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      req.setTimeout(10000, () => {
        req.destroy();
        reject(new Error('Request timeout'));
      });

      req.end();
    });
  }
}

module.exports = new WebSearchService();

