#!/usr/bin/env python3
"""
Mock backend —Å–µ—Ä–≤–µ—Ä –¥–ª—è Windex-–Æ—Ä–∏—Å—Ç
–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç API –æ—Ç–≤–µ—Ç—ã –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
"""

import json
import os
import http.server
import socketserver
from urllib.parse import parse_qs, urlparse

PORT = 3000  # –ò–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—Ç –Ω–∞ 3000 –¥–ª—è frontend

class MockHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ build –ø–∞–ø–∫—É
        super().__init__(*args, directory='build', **kwargs)

    def do_GET(self):
        parsed_path = urlparse(self.path)
        path = parsed_path.path

        # API –º–∞—Ä—à—Ä—É—Ç—ã
        if path.startswith('/api/'):
            self.handle_api_request()
        else:
            # –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            super().do_GET()

    def do_POST(self):
        parsed_path = urlparse(self.path)
        path = parsed_path.path

        if path.startswith('/api/'):
            self.handle_api_request()
        else:
            self.send_error(404, "Not Found")

    def do_OPTIONS(self):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CORS preflight –∑–∞–ø—Ä–æ—Å—ã
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.end_headers()

    def handle_api_request(self):
        parsed_path = urlparse(self.path)
        path = parsed_path.path

        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—É—Ç–∏
        if path == '/api/chat':
            response = {
                'success': True,
                'message': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Windex-–Æ—Ä–∏—Å—Ç!',
                'data': {
                    'response': '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
                    'timestamp': '2024-01-01T00:00:00Z'
                }
            }
        elif path == '/api/documents':
            response = {
                'success': True,
                'documents': [
                    {
                        'id': 1,
                        'name': '–ü—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞.pdf',
                        'type': 'pdf',
                        'size': '2.5 MB',
                        'uploaded': '2024-01-01'
                    }
                ]
            }
        elif path == '/api/profile':
            response = {
                'success': True,
                'profile': {
                    'name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'email': 'user@example.com',
                    'balance': 100.0
                }
            }
        elif path == '/api/admin/stats':
            response = {
                'success': True,
                'stats': {
                    'total_users': 100,
                    'total_documents': 50,
                    'total_chats': 200,
                    'system_load': 15.5
                }
            }
        else:
            response = {
                'success': True,
                'message': f'API endpoint {path} –æ–±—Ä–∞–±–æ—Ç–∞–Ω mock —Å–µ—Ä–≤–µ—Ä–æ–º'
            }

        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))

    def log_message(self, format, *args):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∞
        pass

if __name__ == "__main__":
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print(f"üì° Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{PORT}")
    print(f"üîó API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{PORT}/api/")
    print(f"üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: build/")

    with socketserver.TCPServer(("", PORT), MockHandler) as httpd:
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
